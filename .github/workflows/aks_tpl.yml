on:
  workflow_call:
    inputs:
      java-version:
        description: 'Java version to use'
        required: false
        type: string
        default: '17'
      maven-version:
        description: 'Maven version to use'
        required: false
        type: string
        default: '3.9'
      app-name:
        description: 'Application name'
        required: true
        type: string
      dockerfile-path:
        description: 'Path to Dockerfile'
        required: false
        type: string
        default: './Dockerfile'
      build-context:
        description: 'Docker build context'
        required: false
        type: string
        default: '.'
      # Quality gates
      coverage-threshold:
        description: 'Minimum code coverage percentage'
        required: false
        type: number
        default: 80
      fail-on-critical-vulnerabilities:
        description: 'Override: Fail the pipeline if critical vulnerabilities are found (auto-detected based on branch if not provided)'
        required: false
        type: boolean
      # Deployment
      # deploy-to-staging:
      #   description: 'Deploy to staging environment'
      #   required: false
      #   type: boolean
      #   default: false
      # deploy-to-production:
      #   description: 'Deploy to production environment'
      #   required: false
      #   type: boolean
      #   default: false
      k8s-namespace:
        description: 'Kubernetes namespace'
        required: true
        type: string
      # Grafana Cloud integration
      grafana-url:
        description: 'Grafana Cloud instance URL'
        required: false
        type: string
        default: ''
      enable-grafana-metrics:
        description: 'Enable Grafana Cloud metrics integration'
        required: false
        type: boolean
        default: true

    secrets:
      registry-username:
        description: 'Container registry username'
        required: true
      registry-password:
        description: 'Container registry password'
        required: true
      grafana-api-key:
        description: 'Grafana Cloud API key'
        required: false
      # azure-credentials:
      #   description: 'Azure credentials for deployment'
      #   required: false
      # k8s-config:
      #   description: 'Kubernetes configuration'
      #   required: false

    outputs:
      image-tag:
        description: 'Built image tag'
        value: ${{ jobs.build.outputs.image-tag }}
      image-digest:
        description: 'Image digest'
        value: ${{ jobs.build.outputs.image-digest }}
      # deployment-url:
      #   description: 'Deployment URL'
      #   value: ${{ jobs.deploy-production.outputs.url }}

jobs:
  # validation:
  #   runs-on: ubuntu-latest
  #   outputs: ${{ steps.actorTeams.outputs.teams }}
  #   steps:
  #     - name: Validate permissions
  #       id: actorTeams
  #       uses: tspascoal/get-user-teams-membership@v3
  #       with:
  #         username: ${{ github.actor }}
  #         GITHUB_TOKEN: ${{ secrets.PAT }}

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.docker.outputs.full-image-url }}
      image-digest: ${{ steps.docker.outputs.image-digest }}
      semantic-version: ${{ steps.docker.outputs.semantic-version }}
      build-status: ${{ job.status }}
      code-coverage: ${{ steps.tests.outputs.coverage-percentage }}
      execution-time: ${{ steps.timing.outputs.duration }}
      container-critical: ${{ steps.container-scan.outputs.critical }}
      container-high: ${{ steps.container-scan.outputs.high }}
      container-medium: ${{ steps.container-scan.outputs.medium }}
      container-low: ${{ steps.container-scan.outputs.low }}
      container-total: ${{ steps.container-scan.outputs.vulnerabilities }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Start Timer
        id: start-time
        run: echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Run Tests
        id: tests
        uses: mvasquez13/shared-devsecops-actions/.github/actions/run-tests/maven@main
        with:
          maven-args: ${{ inputs.maven-args }}
          coverage-threshold: ${{ inputs.coverage-threshold }}

      - name: Build Application
        uses: mvasquez13/shared-devsecops-actions/.github/actions/build-app/maven@main
        with:
          app-name: ${{ inputs.app-name }}
          maven-args: ${{ inputs.maven-args }}

      - name: Build Docker Image
        id: docker
        uses: mvasquez13/shared-devsecops-actions/.github/actions/build-docker-image@main
        with:
          app-name: ${{ inputs.app-name }}
          image-name: ${{ inputs.app-name }}
          dockerfile-path: ${{ inputs.dockerfile-path }}
          build-context: ${{ inputs.build-context }}
          registry-username: ${{ secrets.registry-username }} 
          registry-password: ${{ secrets.registry-password }}

      - name: Container Security Scan
        id: container-scan
        uses: mvasquez13/shared-devsecops-actions/.github/actions/container-scan@main
        with:
          image: ${{ steps.docker.outputs.full-image-url }}
          fail-on-critical: 'false'

      - name: Debug Container Scan Outputs
        run: |
          echo "üîç Container Scan Debug - Outputs generated:"
          echo "  Critical: '${{ steps.container-scan.outputs.critical }}'"
          echo "  High: '${{ steps.container-scan.outputs.high }}'"
          echo "  Medium: '${{ steps.container-scan.outputs.medium }}'"
          echo "  Low: '${{ steps.container-scan.outputs.low }}'"
          echo "  Total: '${{ steps.container-scan.outputs.vulnerabilities }}'"

      - name: Generate Build Summary
        run: |
          echo "## üöÄ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Application**: ${{ inputs.app-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Semantic Version**: ${{ steps.docker.outputs.semantic-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ steps.docker.outputs.full-image-url }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: \`${{ steps.docker.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîí Container Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Critical**: ${{ steps.container-scan.outputs.critical || 0 }}" >> $GITHUB_STEP_SUMMARY
          echo "- **High**: ${{ steps.container-scan.outputs.high || 0 }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Medium**: ${{ steps.container-scan.outputs.medium || 0 }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Low**: ${{ steps.container-scan.outputs.low || 0 }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Total**: ${{ steps.container-scan.outputs.vulnerabilities || 0 }}" >> $GITHUB_STEP_SUMMARY

      - name: Calculate Execution Time
        id: timing
        run: |
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - ${{ steps.start-time.outputs.start-time }}))
          echo "duration=${DURATION}" >> $GITHUB_OUTPUT
          echo "‚è±Ô∏è Build execution time: ${DURATION} seconds"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîí Security Policy" >> $GITHUB_STEP_SUMMARY
          echo "- **Vulnerability Policy**: ü§ñ Auto-detected based on branch type" >> $GITHUB_STEP_SUMMARY
          echo "  - Development branches (develop, feature/*, release/*, hotfix/*): Permissive" >> $GITHUB_STEP_SUMMARY
          echo "  - Production branches (main, master, etc.): Strict" >> $GITHUB_STEP_SUMMARY

  sast_analysis:
    name: SAST Analysis
    runs-on: ubuntu-latest
    outputs:
      sast-critical: ${{ steps.sast.outputs.critical-count }}
      sast-high: ${{ steps.sast.outputs.high-severity-count }}
      sast-medium: ${{ steps.sast.outputs.medium-severity-count }}
      sast-low: ${{ steps.sast.outputs.low-severity-count }}
      sast-status: ${{ job.status }}
    permissions: 
      security-events: write 
      actions: read
      contents: read
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SAST Scan with CodeQL
        id: sast
        uses: mvasquez13/shared-devsecops-actions/.github/actions/sast-scanner@main
        with:
          language: 'java-kotlin'
          build-command: 'mvn clean compile -B'

      - name: Debug SAST Outputs
        run: |
          echo "üîç SAST Debug - Outputs generated:"
          echo "  Critical: '${{ steps.sast.outputs.critical-count }}'"
          echo "  High: '${{ steps.sast.outputs.high-severity-count }}'"
          echo "  Medium: '${{ steps.sast.outputs.medium-severity-count }}'"
          echo "  Low: '${{ steps.sast.outputs.low-severity-count }}'"
          echo "  Results Count: '${{ steps.sast.outputs.results-count }}'"
  
  sca_analysis:
    name: SCA Analysis
    runs-on: ubuntu-latest
    outputs:
      sca-critical: ${{ steps.sca.outputs.critical-vulnerabilities }}
      sca-high: ${{ steps.sca.outputs.high-vulnerabilities }}
      sca-medium: ${{ steps.sca.outputs.medium-vulnerabilities }}
      sca-low: ${{ steps.sca.outputs.low-vulnerabilities }}
      sca-status: ${{ job.status }}
    permissions: 
      security-events: write 
      actions: read
      contents: read
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Dependabot SCA Analysis
        id: sca
        uses: mvasquez13/shared-devsecops-actions/.github/actions/sca-scanner@main
        with:
          package-manager: 'maven'
          fail-on-critical: 'false'
          fail-on-high: 'false'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug SCA Outputs  
        run: |
          echo "üîç SCA Debug - Outputs generated:"
          echo "  Critical: '${{ steps.sca.outputs.critical-vulnerabilities }}'"
          echo "  High: '${{ steps.sca.outputs.high-vulnerabilities }}'"
          echo "  Medium: '${{ steps.sca.outputs.medium-vulnerabilities }}'"
          echo "  Low: '${{ steps.sca.outputs.low-vulnerabilities }}'"
          echo "  Total: '${{ steps.sca.outputs.total-vulnerabilities }}'"

  # deploy:
  #   name: Deploy
  #   needs: build
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Deploy
  #       uses: mvasquez13/shared-devsecops-actions/.github/actions/deploy-k8s@main
  #       with:
  #         image-tag: ${{ needs.build.outputs.image-tag }}
  #         namespace: ${{ inputs.k8s-namespace }}-staging
  #         environment: staging
  #         azure-credentials: ${{ secrets.azure-credentials }}
  #         k8s-config: ${{ secrets.k8s-config }}

  notify:
    name: Notify Grafana Cloud
    if: always() && inputs.enable-grafana-metrics
    needs: [build, sast_analysis, sca_analysis]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Calculate Overall Status
        id: overall-status
        run: |
          BUILD_STATUS="${{ needs.build.result }}"
          SAST_STATUS="${{ needs.sast_analysis.result }}"
          SCA_STATUS="${{ needs.sca_analysis.result }}"
          
          echo "üîç Job Results:"
          echo "  Build: ${BUILD_STATUS}"
          echo "  SAST: ${SAST_STATUS}"
          echo "  SCA: ${SCA_STATUS}"
          
          # Determine overall status
          if [[ "${BUILD_STATUS}" == "success" && "${SAST_STATUS}" == "success" && "${SCA_STATUS}" == "success" ]]; then
            OVERALL_STATUS="success"
          elif [[ "${BUILD_STATUS}" == "failure" || "${SAST_STATUS}" == "failure" || "${SCA_STATUS}" == "failure" ]]; then
            OVERALL_STATUS="failure"
          else
            OVERALL_STATUS="partial"
          fi
          
          echo "overall-status=${OVERALL_STATUS}" >> $GITHUB_OUTPUT
          echo "üìä Overall Status: ${OVERALL_STATUS}"

      - name: Calculate Total Vulnerabilities
        id: vulnerabilities
        run: |
          echo "üîç Debug - Raw outputs from jobs:"
          echo "  SAST Critical: '${{ needs.sast_analysis.outputs.sast-critical }}'"
          echo "  SAST High: '${{ needs.sast_analysis.outputs.sast-high }}'"
          echo "  SAST Medium: '${{ needs.sast_analysis.outputs.sast-medium }}'"
          echo "  SAST Low: '${{ needs.sast_analysis.outputs.sast-low }}'"
          echo "  SCA Critical: '${{ needs.sca_analysis.outputs.sca-critical }}'"
          echo "  SCA High: '${{ needs.sca_analysis.outputs.sca-high }}'"
          echo "  SCA Medium: '${{ needs.sca_analysis.outputs.sca-medium }}'"
          echo "  SCA Low: '${{ needs.sca_analysis.outputs.sca-low }}'"
          echo "  Container Critical: '${{ needs.build.outputs.container-critical }}'"
          echo "  Container High: '${{ needs.build.outputs.container-high }}'"
          echo "  Container Medium: '${{ needs.build.outputs.container-medium }}'"
          echo "  Container Low: '${{ needs.build.outputs.container-low }}'"
          echo ""
          
          # SAST vulnerabilities (with fallback to 0)
          SAST_CRITICAL="${{ needs.sast_analysis.outputs.sast-critical || 0 }}"
          SAST_HIGH="${{ needs.sast_analysis.outputs.sast-high || 0 }}"
          SAST_MEDIUM="${{ needs.sast_analysis.outputs.sast-medium || 0 }}"
          SAST_LOW="${{ needs.sast_analysis.outputs.sast-low || 0 }}"
          
          # SCA vulnerabilities (with fallback to 0)
          SCA_CRITICAL="${{ needs.sca_analysis.outputs.sca-critical || 0 }}"
          SCA_HIGH="${{ needs.sca_analysis.outputs.sca-high || 0 }}"
          SCA_MEDIUM="${{ needs.sca_analysis.outputs.sca-medium || 0 }}"
          SCA_LOW="${{ needs.sca_analysis.outputs.sca-low || 0 }}"
          
          # Container vulnerabilities (with fallback to 0)
          CONTAINER_CRITICAL="${{ needs.build.outputs.container-critical || 0 }}"
          CONTAINER_HIGH="${{ needs.build.outputs.container-high || 0 }}"
          CONTAINER_MEDIUM="${{ needs.build.outputs.container-medium || 0 }}"
          CONTAINER_LOW="${{ needs.build.outputs.container-low || 0 }}"
          
          # Calculate totals
          TOTAL_CRITICAL=$((SAST_CRITICAL + SCA_CRITICAL + CONTAINER_CRITICAL))
          TOTAL_HIGH=$((SAST_HIGH + SCA_HIGH + CONTAINER_HIGH))
          TOTAL_MEDIUM=$((SAST_MEDIUM + SCA_MEDIUM + CONTAINER_MEDIUM))
          TOTAL_LOW=$((SAST_LOW + SCA_LOW + CONTAINER_LOW))
          
          echo "üîç Vulnerability Summary:"
          echo "  Critical: ${TOTAL_CRITICAL} (SAST: ${SAST_CRITICAL}, SCA: ${SCA_CRITICAL}, Container: ${CONTAINER_CRITICAL})"
          echo "  High: ${TOTAL_HIGH} (SAST: ${SAST_HIGH}, SCA: ${SCA_HIGH}, Container: ${CONTAINER_HIGH})"
          echo "  Medium: ${TOTAL_MEDIUM} (SAST: ${SAST_MEDIUM}, SCA: ${SCA_MEDIUM}, Container: ${CONTAINER_MEDIUM})"
          echo "  Low: ${TOTAL_LOW} (SAST: ${SAST_LOW}, SCA: ${SCA_LOW}, Container: ${CONTAINER_LOW})"
          
          echo "critical=${TOTAL_CRITICAL}" >> $GITHUB_OUTPUT
          echo "high=${TOTAL_HIGH}" >> $GITHUB_OUTPUT
          echo "medium=${TOTAL_MEDIUM}" >> $GITHUB_OUTPUT
          echo "low=${TOTAL_LOW}" >> $GITHUB_OUTPUT

      - name: Send Metrics to Grafana Cloud
        uses: mvasquez13/shared-devsecops-actions/.github/actions/notify-grafana@main
        with:
          grafana-api-key: ${{ secrets.grafana-api-key }}
          app-name: ${{ inputs.app-name }}
          app-version: ${{ needs.build.outputs.semantic-version || github.sha }}
          environment: ${{ github.ref_name == 'main' && 'production' || github.ref_name == 'develop' && 'staging' || 'development' }}
          build-status: ${{ steps.overall-status.outputs.overall-status }}
          vulnerabilities-critical: ${{ steps.vulnerabilities.outputs.critical }}
          vulnerabilities-high: ${{ steps.vulnerabilities.outputs.high }}
          vulnerabilities-medium: ${{ steps.vulnerabilities.outputs.medium }}
          vulnerabilities-low: ${{ steps.vulnerabilities.outputs.low }}
          code-coverage: ${{ needs.build.outputs.code-coverage || 0 }}
          execution-time: ${{ needs.build.outputs.execution-time || 0 }}
          enable-loki: 'false'
          enable-annotations: 'false'
