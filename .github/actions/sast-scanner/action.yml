name: 'CodeQL SAST Scanner'
description: 'Static Application Security Testing using GitHub CodeQL'

inputs:
  language:
    description: 'Programming language (java, javascript, python, csharp, go, ruby)'
    required: true
  build-command:
    description: 'Build command for compiled languages (Maven, Gradle, etc.)'
    required: true

outputs:
  results-count:
    description: 'Number of security issues found'
    value: ${{ steps.results.outputs.count }}
  critical-count:
    description: 'Number of critical/error issues'
    value: ${{ steps.results.outputs.critical }}
  high-severity-count:
    description: 'Number of high severity issues'
    value: ${{ steps.results.outputs.high-severity }}
  medium-severity-count:
    description: 'Number of medium severity issues'
    value: ${{ steps.results.outputs.medium-severity }}
  low-severity-count:
    description: 'Number of low severity issues'
    value: ${{ steps.results.outputs.low-severity }}
  database-path:
    description: 'Path to CodeQL database'
    value: ${{ steps.init.outputs.codeql-path }}
  sarif-file:
    description: 'Path to SARIF results file'
    value: ${{ steps.results.outputs.sarif-file }}

runs:
  using: 'composite'
  steps:
    - name: Initialize CodeQL
      id: init
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ inputs.language }}

    - name: Setup Maven for Java Analysis
      if: inputs.language == 'java-kotlin'
      shell: bash
      run: |
        echo "☕ Setting up Maven environment for CodeQL analysis..."
        if [ -f "pom.xml" ]; then
          echo "📦 Resolving Maven dependencies..."
          mvn dependency:resolve -B -q
        fi

    - name: Build Application for Analysis
      if: inputs.language == 'java-kotlin'
      shell: bash
      run: |
        echo "🏗️ Building application for CodeQL analysis..."
        ${{ inputs.build-command }}
        
        # Verify build artifacts
        if [ -d "target/classes" ]; then
          echo "✅ Build successful - classes found in target/classes"
          echo "📊 Compiled classes count: $(find target/classes -name "*.class" | wc -l)"
        else
          echo "⚠️ Warning: No compiled classes found in target/classes"
        fi


    - name: Perform CodeQL Analysis
      id: analyze
      uses: github/codeql-action/analyze@v3
      with:
        category: "codeql-${{ inputs.language }}"

    - name: Parse CodeQL Results
      id: results
      shell: bash
      run: |
        echo "� Parsing CodeQL analysis results..."
        
        # Find the SARIF file
        SARIF_FILE=""
        if [ -d "${{ steps.analyze.outputs.sarif-output }}" ]; then
          SARIF_FILE=$(find "${{ steps.analyze.outputs.sarif-output }}" -name "*.sarif" -type f | head -1)
        fi
        
        if [ -n "$SARIF_FILE" ] && [ -f "$SARIF_FILE" ]; then
          echo "� Found SARIF file: $SARIF_FILE"
          
          # Debug: Show SARIF structure first
          echo "🔍 SARIF structure analysis:"
          jq '.runs[].results[0:2] | .[] | {ruleId: .ruleId, level: .level, kind: .kind, severity: (.properties.severity // "N/A")}' "$SARIF_FILE" 2>/dev/null || echo "Could not analyze SARIF structure"
          
          # Count total results
          TOTAL_RESULTS=$(jq '[.runs[].results] | add | length' "$SARIF_FILE" 2>/dev/null || echo "0")
          
          # Count by CodeQL severity levels (error, warning, note, info)
          ERROR_COUNT=$(jq '[.runs[].results[] | select(.level == "error")] | length' "$SARIF_FILE" 2>/dev/null || echo "0")
          WARNING_COUNT=$(jq '[.runs[].results[] | select(.level == "warning")] | length' "$SARIF_FILE" 2>/dev/null || echo "0")
          NOTE_COUNT=$(jq '[.runs[].results[] | select(.level == "note")] | length' "$SARIF_FILE" 2>/dev/null || echo "0")
          INFO_COUNT=$(jq '[.runs[].results[] | select(.level == "info")] | length' "$SARIF_FILE" 2>/dev/null || echo "0")
          
          # Also check for severity in properties (CodeQL sometimes uses this)
          HIGH_SEVERITY=$(jq '[.runs[].results[] | select(.properties.severity == "high")] | length' "$SARIF_FILE" 2>/dev/null || echo "0")
          MEDIUM_SEVERITY=$(jq '[.runs[].results[] | select(.properties.severity == "medium")] | length' "$SARIF_FILE" 2>/dev/null || echo "0")
          LOW_SEVERITY=$(jq '[.runs[].results[] | select(.properties.severity == "low")] | length' "$SARIF_FILE" 2>/dev/null || echo "0")
          
          # Set outputs
          echo "count=$TOTAL_RESULTS" >> $GITHUB_OUTPUT
          echo "critical=$ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "warning=$WARNING_COUNT" >> $GITHUB_OUTPUT
          echo "info=$((NOTE_COUNT + INFO_COUNT))" >> $GITHUB_OUTPUT
          echo "high-severity=$HIGH_SEVERITY" >> $GITHUB_OUTPUT
          echo "medium-severity=$MEDIUM_SEVERITY" >> $GITHUB_OUTPUT
          echo "low-severity=$LOW_SEVERITY" >> $GITHUB_OUTPUT
          echo "sarif-file=$SARIF_FILE" >> $GITHUB_OUTPUT
          
          echo "🔍 CodeQL Analysis Summary:"
          echo "  - Total Issues: $TOTAL_RESULTS"
          echo "  - Critical/Error: $ERROR_COUNT"
          echo "  - Warning: $WARNING_COUNT" 
          echo "  - Note/Info: $((NOTE_COUNT + INFO_COUNT))"
          echo "  - High Severity: $HIGH_SEVERITY"
          echo "  - Medium Severity: $MEDIUM_SEVERITY"
          echo "  - Low Severity: $LOW_SEVERITY"
          
          # Show detailed breakdown of all issues
          if [ "$TOTAL_RESULTS" -gt 0 ]; then
            echo ""
            echo "📋 Detailed Issues Found:"
            jq -r '.runs[].results[] | "- [\(.level)] \(.ruleId): \(.message.text) (Severity: \(.properties.severity // "N/A"))"' "$SARIF_FILE" 2>/dev/null || echo "Could not parse issue details"
          fi
          
          # Debug: Show unique levels and severities found
          echo ""
          echo "🔧 Debug - Unique levels found:"
          jq -r '.runs[].results[] | .level' "$SARIF_FILE" 2>/dev/null | sort | uniq -c || echo "Could not extract levels"
          echo "🔧 Debug - Unique severities found:"
          jq -r '.runs[].results[] | .properties.severity // "none"' "$SARIF_FILE" 2>/dev/null | sort | uniq -c || echo "Could not extract severities"
        else
          echo "⚠️ No SARIF results file found"
          echo "count=0" >> $GITHUB_OUTPUT
          echo "critical=0" >> $GITHUB_OUTPUT
          echo "warning=0" >> $GITHUB_OUTPUT
          echo "info=0" >> $GITHUB_OUTPUT
          echo "high-severity=0" >> $GITHUB_OUTPUT
          echo "medium-severity=0" >> $GITHUB_OUTPUT
          echo "low-severity=0" >> $GITHUB_OUTPUT
        fi

    - name: Check Security Threshold
      if: inputs.fail-on-error == 'true'
      shell: bash
      run: |
        CRITICAL_COUNT="${{ steps.results.outputs.critical }}"
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "❌ Found $CRITICAL_COUNT critical security issues!"
          echo "Failing as requested by fail-on-error=true"
          exit 1
        else
          echo "✅ No critical security issues found"
        fi

    - name: Generate Security Summary
      shell: bash
      run: |
        echo "## 🔍 CodeQL SAST Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Language**: ${{ inputs.language }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Command**: \`${{ inputs.build-command }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Issues**: ${{ steps.results.outputs.count || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 By Level" >> $GITHUB_STEP_SUMMARY
        echo "- **Critical/Error**: ${{ steps.results.outputs.critical || 'N/A' }} 🚨" >> $GITHUB_STEP_SUMMARY
        echo "- **Warning**: ${{ steps.results.outputs.warning || 'N/A' }} ⚠️" >> $GITHUB_STEP_SUMMARY
        echo "- **Info**: ${{ steps.results.outputs.info || 'N/A' }} ℹ️" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 By Severity" >> $GITHUB_STEP_SUMMARY
        echo "- **High**: ${{ steps.results.outputs.high-severity || 'N/A' }} 🔴" >> $GITHUB_STEP_SUMMARY
        echo "- **Medium**: ${{ steps.results.outputs.medium-severity || 'N/A' }} 🟡" >> $GITHUB_STEP_SUMMARY
        echo "- **Low**: ${{ steps.results.outputs.low-severity || 'N/A' }} 🟢" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.results.outputs.count }}" -gt 0 ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the **Security** tab for detailed findings" >> $GITHUB_STEP_SUMMARY
          echo "2. Review the uploaded SARIF artifacts" >> $GITHUB_STEP_SUMMARY
          echo "3. Address critical and high-severity issues first" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **No security issues detected!**" >> $GITHUB_STEP_SUMMARY
        fi
