name: 'DAST Scanner'
description: 'Dynamic Application Security Testing'

inputs:
  target-url:
    description: 'Target URL to scan'
    required: true
  scan-type:
    description: 'Type of scan (baseline, full, api)'
    required: false
    default: 'baseline'
  wait-for-app:
    description: 'Wait time for app to start (seconds)'
    required: false
    default: '30'
  api-spec:
    description: 'Path to OpenAPI/Swagger spec for API testing'
    required: false
  authentication:
    description: 'Authentication method (none, basic, bearer)'
    required: false
    default: 'none'
  auth-username:
    description: 'Username for authentication'
    required: false
  auth-password:
    description: 'Password for authentication'
    required: false

outputs:
  alerts:
    description: 'Number of security alerts found'
    value: ${{ steps.analyze.outputs.alerts }}
  high-alerts:
    description: 'Number of high risk alerts'
    value: ${{ steps.analyze.outputs.high-alerts }}
  report-path:
    description: 'Path to the generated report'
    value: ${{ steps.analyze.outputs.report-path }}

runs:
  using: 'composite'
  steps:
    - name: Setup DAST Environment
      shell: bash
      run: |
        echo "🌐 Setting up DAST analysis..."
        mkdir -p security-reports/dast
        
        # Install required tools
        python3 -m pip install requests urllib3

    - name: Wait for Application
      shell: bash
      run: |
        echo "⏳ Waiting for application to be ready..."
        sleep ${{ inputs.wait-for-app }}
        
        # Health check
        for i in {1..10}; do
          echo "Attempt $i: Checking ${{ inputs.target-url }}"
          if curl -f -s -o /dev/null "${{ inputs.target-url }}"; then
            echo "✅ Application is ready!"
            break
          fi
          echo "Application not ready, waiting 10 seconds..."
          sleep 10
        done

    - name: OWASP ZAP Baseline Scan
      if: inputs.scan-type == 'baseline'
      shell: bash
      run: |
        echo "🕷️ Running OWASP ZAP Baseline scan..."
        
        # Pull ZAP Docker image
        docker pull owasp/zap2docker-stable:latest
        
        # Run baseline scan
        docker run -v $(pwd):/zap/wrk/:rw \
          -t owasp/zap2docker-stable \
          zap-baseline.py \
          -t "${{ inputs.target-url }}" \
          -J security-reports/dast/zap-baseline.json \
          -r security-reports/dast/zap-baseline.html || true
        
        echo "Baseline scan completed"

    - name: OWASP ZAP Full Scan
      if: inputs.scan-type == 'full'
      shell: bash
      run: |
        echo "🕷️ Running OWASP ZAP Full scan..."
        
        # Pull ZAP Docker image
        docker pull owasp/zap2docker-stable:latest
        
        # Create ZAP configuration
        cat > zap-config.yaml << EOF
env:
  contexts:
    - name: "MiBanco App"
      urls:
        - "${{ inputs.target-url }}"
      includePaths:
        - "${{ inputs.target-url }}.*"
      authentication:
        method: "${{ inputs.authentication }}"
jobs:
  - type: spider
    parameters:
      context: "MiBanco App"
      maxDuration: 5
  - type: activeScan
    parameters:
      context: "MiBanco App"
      maxDuration: 10
EOF
        
        # Run full scan
        docker run -v $(pwd):/zap/wrk/:rw \
          -t owasp/zap2docker-stable \
          zap-full-scan.py \
          -t "${{ inputs.target-url }}" \
          -J security-reports/dast/zap-full.json \
          -r security-reports/dast/zap-full.html || true
        
        echo "Full scan completed"

    - name: OWASP ZAP API Scan
      if: inputs.scan-type == 'api' && inputs.api-spec
      shell: bash
      run: |
        echo "📡 Running OWASP ZAP API scan..."
        
        # Pull ZAP Docker image
        docker pull owasp/zap2docker-stable:latest
        
        # Run API scan
        docker run -v $(pwd):/zap/wrk/:rw \
          -t owasp/zap2docker-stable \
          zap-api-scan.py \
          -t "${{ inputs.target-url }}" \
          -f openapi \
          -O "${{ inputs.api-spec }}" \
          -J security-reports/dast/zap-api.json \
          -r security-reports/dast/zap-api.html || true
        
        echo "API scan completed"

    - name: Custom Security Tests
      shell: bash
      run: |
        echo "🔒 Running custom security tests..."
        
        # Create custom security test script
        cat > security-tests.py << 'EOF'
import requests
import json
import sys
from urllib.parse import urljoin
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def test_security_headers(base_url):
    """Test for security headers"""
    results = []
    
    try:
        response = requests.get(base_url, verify=False, timeout=10)
        headers = response.headers
        
        # Check for security headers
        security_headers = {
            'X-Content-Type-Options': 'nosniff',
            'X-Frame-Options': ['DENY', 'SAMEORIGIN'],
            'X-XSS-Protection': '1; mode=block',
            'Strict-Transport-Security': None,
            'Content-Security-Policy': None,
            'Referrer-Policy': None
        }
        
        for header, expected in security_headers.items():
            if header not in headers:
                results.append({
                    'type': 'Missing Security Header',
                    'severity': 'Medium',
                    'description': f'Missing {header} header',
                    'recommendation': f'Add {header} header'
                })
            elif expected and isinstance(expected, list):
                if headers[header] not in expected:
                    results.append({
                        'type': 'Weak Security Header',
                        'severity': 'Low',
                        'description': f'{header} header value: {headers[header]}',
                        'recommendation': f'Use recommended values: {expected}'
                    })
        
        # Check for information disclosure
        server_header = headers.get('Server', '')
        if server_header and any(tech in server_header.lower() for tech in ['apache', 'nginx', 'tomcat', 'jetty']):
            results.append({
                'type': 'Information Disclosure',
                'severity': 'Low',
                'description': f'Server header reveals technology: {server_header}',
                'recommendation': 'Remove or obfuscate server header'
            })
            
    except Exception as e:
        results.append({
            'type': 'Connection Error',
            'severity': 'Info',
            'description': f'Could not connect to {base_url}: {str(e)}',
            'recommendation': 'Verify application is running'
        })
    
    return results

def test_common_endpoints(base_url):
    """Test for common vulnerable endpoints"""
    results = []
    
    # Common endpoints to test
    test_endpoints = [
        '/admin',
        '/admin/',
        '/administrator',
        '/login',
        '/dashboard',
        '/.env',
        '/config',
        '/wp-admin',
        '/phpmyadmin',
        '/actuator/health',
        '/health',
        '/metrics'
    ]
    
    for endpoint in test_endpoints:
        try:
            url = urljoin(base_url, endpoint)
            response = requests.get(url, verify=False, timeout=5)
            
            if response.status_code == 200:
                if endpoint in ['/.env', '/config']:
                    results.append({
                        'type': 'Sensitive File Exposure',
                        'severity': 'High',
                        'description': f'Accessible endpoint: {endpoint}',
                        'recommendation': 'Block access to sensitive files'
                    })
                elif endpoint.startswith('/admin'):
                    results.append({
                        'type': 'Admin Interface Exposed',
                        'severity': 'Medium',
                        'description': f'Admin endpoint accessible: {endpoint}',
                        'recommendation': 'Secure admin interfaces'
                    })
                    
        except:
            continue
    
    return results

if __name__ == "__main__":
    target_url = sys.argv[1] if len(sys.argv) > 1 else "http://localhost:8080"
    
    print(f"Testing {target_url}...")
    
    all_results = []
    all_results.extend(test_security_headers(target_url))
    all_results.extend(test_common_endpoints(target_url))
    
    # Save results
    with open('security-reports/dast/custom-tests.json', 'w') as f:
        json.dump(all_results, f, indent=2)
    
    # Print summary
    high_count = sum(1 for r in all_results if r['severity'] == 'High')
    medium_count = sum(1 for r in all_results if r['severity'] == 'Medium')
    low_count = sum(1 for r in all_results if r['severity'] == 'Low')
    
    print(f"Custom tests found: {len(all_results)} issues")
    print(f"High: {high_count}, Medium: {medium_count}, Low: {low_count}")
EOF
        
        # Run custom tests
        python3 security-tests.py "${{ inputs.target-url }}"

    - name: Analyze DAST Results
      id: analyze
      shell: bash
      run: |
        echo "📊 Analyzing DAST results..."
        
        TOTAL_ALERTS=0
        HIGH_ALERTS=0
        
        # Parse ZAP results
        if [ -f "security-reports/dast/zap-baseline.json" ]; then
          ZAP_ALERTS=$(jq '.site[].alerts[]?' security-reports/dast/zap-baseline.json 2>/dev/null | wc -l || echo "0")
          ZAP_HIGH=$(jq '.site[].alerts[]? | select(.riskdesc | startswith("High"))' security-reports/dast/zap-baseline.json 2>/dev/null | wc -l || echo "0")
          
          TOTAL_ALERTS=$((TOTAL_ALERTS + ZAP_ALERTS))
          HIGH_ALERTS=$((HIGH_ALERTS + ZAP_HIGH))
          
          echo "ZAP Baseline: $ZAP_ALERTS alerts ($ZAP_HIGH high)"
        fi
        
        if [ -f "security-reports/dast/zap-full.json" ]; then
          ZAP_FULL_ALERTS=$(jq '.site[].alerts[]?' security-reports/dast/zap-full.json 2>/dev/null | wc -l || echo "0")
          ZAP_FULL_HIGH=$(jq '.site[].alerts[]? | select(.riskdesc | startswith("High"))' security-reports/dast/zap-full.json 2>/dev/null | wc -l || echo "0")
          
          TOTAL_ALERTS=$((TOTAL_ALERTS + ZAP_FULL_ALERTS))
          HIGH_ALERTS=$((HIGH_ALERTS + ZAP_FULL_HIGH))
          
          echo "ZAP Full: $ZAP_FULL_ALERTS alerts ($ZAP_FULL_HIGH high)"
        fi
        
        # Parse custom test results
        if [ -f "security-reports/dast/custom-tests.json" ]; then
          CUSTOM_ALERTS=$(jq '. | length' security-reports/dast/custom-tests.json 2>/dev/null || echo "0")
          CUSTOM_HIGH=$(jq '.[] | select(.severity == "High")' security-reports/dast/custom-tests.json 2>/dev/null | wc -l || echo "0")
          
          TOTAL_ALERTS=$((TOTAL_ALERTS + CUSTOM_ALERTS))
          HIGH_ALERTS=$((HIGH_ALERTS + CUSTOM_HIGH))
          
          echo "Custom Tests: $CUSTOM_ALERTS issues ($CUSTOM_HIGH high)"
        fi
        
        echo "alerts=$TOTAL_ALERTS" >> $GITHUB_OUTPUT
        echo "high-alerts=$HIGH_ALERTS" >> $GITHUB_OUTPUT
        echo "report-path=security-reports/dast/" >> $GITHUB_OUTPUT
        
        echo "## 🌐 DAST Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: ${{ inputs.target-url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Scan Type**: ${{ inputs.scan-type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Alerts**: $TOTAL_ALERTS" >> $GITHUB_STEP_SUMMARY
        echo "- **High Risk**: $HIGH_ALERTS" >> $GITHUB_STEP_SUMMARY
        
        # List available reports
        if [ -d "security-reports/dast" ]; then
          echo "- **Reports Generated**:" >> $GITHUB_STEP_SUMMARY
          ls -1 security-reports/dast/ | sed 's/^/  - /' >> $GITHUB_STEP_SUMMARY
        fi

    - name: Generate Summary Report
      shell: bash
      run: |
        echo "📋 Generating DAST summary..."
        
        # Create consolidated report
        cat > security-reports/dast/dast-summary.json << EOF
{
  "scan_info": {
    "target": "${{ inputs.target-url }}",
    "scan_type": "${{ inputs.scan-type }}",
    "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
  },
  "summary": {
    "total_alerts": ${{ steps.analyze.outputs.alerts }},
    "high_alerts": ${{ steps.analyze.outputs.high-alerts }}
  },
  "reports": []
}
EOF
        
        echo "✅ DAST analysis completed"