name: 'SCA Scanner - Dependabot'
description: 'Software Composition Analysis using GitHub Dependabot and Advisory Database'

inputs:
  project-path:
    description: 'Path to the project directory'
    required: false
    default: '.'
  
  package-manager:
    description: 'Package manager type (maven, npm, pip, gradle, composer)'
    required: false
    default: 'auto'
  
  fail-on-critical:
    description: 'Fail the build on critical vulnerabilities'
    required: false
    default: 'true'
  
  fail-on-high:
    description: 'Fail the build on high severity vulnerabilities'
    required: false
    default: 'false'
  
  generate-sarif:
    description: 'Generate SARIF report for GitHub Code Scanning'
    required: false
    default: 'true'
  
  upload-sarif:
    description: 'Upload SARIF report to GitHub Security tab'
    required: false
    default: 'true'
  
  github-token:
    description: 'GitHub token for API access'
    required: false
    default: ${{ github.token }}

outputs:
  total-vulnerabilities:
    description: 'Total number of vulnerabilities found'
    value: ${{ steps.scan.outputs.total }}
  
  critical-vulnerabilities:
    description: 'Number of critical vulnerabilities'
    value: ${{ steps.scan.outputs.critical }}
  
  high-vulnerabilities:
    description: 'Number of high vulnerabilities'
    value: ${{ steps.scan.outputs.high }}
  
  medium-vulnerabilities:
    description: 'Number of medium vulnerabilities'
    value: ${{ steps.scan.outputs.medium }}
  
  low-vulnerabilities:
    description: 'Number of low vulnerabilities'
    value: ${{ steps.scan.outputs.low }}
  
  sarif-file:
    description: 'Path to generated SARIF file'
    value: ${{ steps.scan.outputs.sarif-file }}

runs:
  using: 'composite'
  steps:
    - name: Setup Dependabot Analysis Environment
      shell: bash
      run: |
        echo "🔧 Setting up Dependabot SCA analysis environment..."
        
        # Install GitHub CLI if not available
        if ! command -v gh &> /dev/null; then
          echo "📦 Installing GitHub CLI..."
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
        fi
        
        # Ensure jq is available
        if ! command -v jq &> /dev/null; then
          echo "📦 Installing jq..."
          sudo apt update && sudo apt install -y jq
        fi
        
        echo "✅ Dependabot SCA environment setup completed"

    - name: Detect Package Manager
      id: detect
      shell: bash
      working-directory: ${{ inputs.project-path }}
      run: |
        echo "🔍 Detecting package manager..."
        
        PACKAGE_MANAGER="${{ inputs.package-manager }}"
        
        if [ "$PACKAGE_MANAGER" = "auto" ]; then
          if [ -f "pom.xml" ]; then
            PACKAGE_MANAGER="maven"
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            PACKAGE_MANAGER="gradle"
          elif [ -f "package.json" ]; then
            PACKAGE_MANAGER="npm"
          elif [ -f "requirements.txt" ] || [ -f "Pipfile" ] || [ -f "pyproject.toml" ]; then
            PACKAGE_MANAGER="pip"
          elif [ -f "composer.json" ]; then
            PACKAGE_MANAGER="composer"
          elif [ -f "Gemfile" ]; then
            PACKAGE_MANAGER="bundler"
          elif [ -f "go.mod" ]; then
            PACKAGE_MANAGER="go"
          else
            echo "⚠️ Could not detect package manager, defaulting to maven"
            PACKAGE_MANAGER="maven"
          fi
        fi
        
        echo "package-manager=$PACKAGE_MANAGER" >> $GITHUB_OUTPUT
        echo "📦 Detected package manager: $PACKAGE_MANAGER"

    - name: Run Dependabot SCA Analysis
      id: scan
      shell: bash
      working-directory: ${{ inputs.project-path }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        echo "🔍 Running Dependabot SCA analysis..."
        
        PACKAGE_MANAGER="${{ steps.detect.outputs.package-manager }}"
        CRITICAL_COUNT=0
        HIGH_COUNT=0
        MEDIUM_COUNT=0
        LOW_COUNT=0
        TOTAL_COUNT=0
        
        # Create reports directory
        mkdir -p sca-reports
        
        echo "📊 Analyzing dependencies with Dependabot for $PACKAGE_MANAGER..."
        
        # Get repository information
        REPO_OWNER="${GITHUB_REPOSITORY%/*}"
        REPO_NAME="${GITHUB_REPOSITORY#*/}"
        
        echo "Repository: $REPO_OWNER/$REPO_NAME"
        
        # Get Dependabot alerts using GitHub API
        echo "🔍 Fetching Dependabot alerts from GitHub..."
        
        gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "/repos/$REPO_OWNER/$REPO_NAME/dependabot/alerts?state=open" \
          > sca-reports/dependabot-alerts.json 2>/dev/null || echo "[]" > sca-reports/dependabot-alerts.json
        
        # Parse Dependabot alerts
        echo "📊 Parsing Dependabot vulnerability results..."
        
        if [ -f "sca-reports/dependabot-alerts.json" ]; then
          # Count vulnerabilities by severity
          CRITICAL_COUNT=$(jq '[.[] | select(.security_vulnerability.severity == "critical")] | length' sca-reports/dependabot-alerts.json 2>/dev/null || echo "0")
          HIGH_COUNT=$(jq '[.[] | select(.security_vulnerability.severity == "high")] | length' sca-reports/dependabot-alerts.json 2>/dev/null || echo "0")
          MEDIUM_COUNT=$(jq '[.[] | select(.security_vulnerability.severity == "medium")] | length' sca-reports/dependabot-alerts.json 2>/dev/null || echo "0")
          LOW_COUNT=$(jq '[.[] | select(.security_vulnerability.severity == "low")] | length' sca-reports/dependabot-alerts.json 2>/dev/null || echo "0")
          
          TOTAL_COUNT=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT))
          
          echo "Dependabot Alerts: Critical=$CRITICAL_COUNT, High=$HIGH_COUNT, Medium=$MEDIUM_COUNT, Low=$LOW_COUNT"
          
          # Generate detailed vulnerability report
          echo "� Generating detailed Dependabot vulnerability report..."
          jq '
          {
            summary: {
              total: length,
              critical: [.[] | select(.security_vulnerability.severity == "critical")] | length,
              high: [.[] | select(.security_vulnerability.severity == "high")] | length,
              medium: [.[] | select(.security_vulnerability.severity == "medium")] | length,
              low: [.[] | select(.security_vulnerability.severity == "low")] | length
            },
            vulnerabilities: [.[] | {
              number: .number,
              state: .state,
              dependency: .dependency.package.name,
              manifest_path: .dependency.manifest_path,
              severity: .security_vulnerability.severity,
              summary: .security_advisory.summary,
              description: .security_advisory.description,
              cve_id: .security_advisory.cve_id,
              ghsa_id: .security_advisory.ghsa_id,
              published_at: .security_advisory.published_at,
              updated_at: .security_advisory.updated_at,
              vulnerable_version_range: .security_vulnerability.vulnerable_version_range,
              first_patched_version: .security_vulnerability.first_patched_version.identifier,
              url: .html_url
            }]
          }' sca-reports/dependabot-alerts.json > sca-reports/detailed-report.json
          
        else
          echo "⚠️ No Dependabot alerts found or unable to fetch alerts"
        fi
        
        # Also check for GitHub Advisory Database using dependency manifest
        echo "🔍 Checking dependencies against GitHub Advisory Database..."
        
        case $PACKAGE_MANAGER in
          "maven")
            if [ -f "pom.xml" ]; then
              echo "Analyzing Maven dependencies..."
              # Generate dependency list
              if command -v mvn &> /dev/null; then
                mvn dependency:list -DoutputFile=sca-reports/maven-deps.txt -q &>/dev/null || true
                
                if [ -f "sca-reports/maven-deps.txt" ]; then
                  echo "✅ Maven dependencies extracted"
                  
                  # Create a summary for Maven deps
                  DEP_COUNT=$(grep -c ":" sca-reports/maven-deps.txt 2>/dev/null || echo "0")
                  echo "Found $DEP_COUNT Maven dependencies"
                fi
              fi
            fi
            ;;
            
          "npm")
            if [ -f "package.json" ]; then
              echo "Analyzing NPM dependencies..."
              # Run npm audit for additional validation
              npm audit --json > sca-reports/npm-audit.json 2>/dev/null || echo "{}" > sca-reports/npm-audit.json
              
              if [ -f "sca-reports/npm-audit.json" ]; then
                NPM_VULNS=$(jq '.metadata.vulnerabilities.total // 0' sca-reports/npm-audit.json 2>/dev/null || echo "0")
                echo "NPM Audit found $NPM_VULNS additional vulnerabilities"
                
                # Add npm audit results to totals if not already covered by Dependabot
                if [ "$NPM_VULNS" -gt "$TOTAL_COUNT" ]; then
                  echo "Adding NPM audit findings to analysis..."
                  ADDITIONAL_MEDIUM=$(( NPM_VULNS - TOTAL_COUNT ))
                  MEDIUM_COUNT=$((MEDIUM_COUNT + ADDITIONAL_MEDIUM))
                  TOTAL_COUNT=$((TOTAL_COUNT + ADDITIONAL_MEDIUM))
                fi
              fi
            fi
            ;;
            
          "pip")
            if [ -f "requirements.txt" ]; then
              echo "Analyzing Python dependencies..."
              # List dependencies for reference
              echo "Found requirements.txt with $(wc -l < requirements.txt) dependencies"
            fi
            ;;
        esac
        
        # Set outputs
        echo "total=$TOTAL_COUNT" >> $GITHUB_OUTPUT
        echo "critical=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        echo "high=$HIGH_COUNT" >> $GITHUB_OUTPUT
        echo "medium=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
        echo "low=$LOW_COUNT" >> $GITHUB_OUTPUT
        
        echo ""
        echo "🔍 Dependabot SCA Analysis Summary:"
        echo "  - Total Vulnerabilities: $TOTAL_COUNT"
        echo "  - Critical: $CRITICAL_COUNT"
        echo "  - High: $HIGH_COUNT"
        echo "  - Medium: $MEDIUM_COUNT"
        echo "  - Low: $LOW_COUNT"
        echo ""
        echo "📊 Analysis completed using GitHub Dependabot and Advisory Database"
        
        # Generate summary JSON
        cat > sca-reports/summary.json << EOF
        {
          "total": $TOTAL_COUNT,
          "critical": $CRITICAL_COUNT,
          "high": $HIGH_COUNT,
          "medium": $MEDIUM_COUNT,
          "low": $LOW_COUNT,
          "package_manager": "$PACKAGE_MANAGER",
          "scan_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "scanner": "dependabot"
        }
        EOF

    - name: Generate SARIF Report
      if: inputs.generate-sarif == 'true'
      shell: bash
      working-directory: ${{ inputs.project-path }}
      run: |
        echo "📄 Generating SARIF report from Dependabot alerts..."
        
        SARIF_FILE="sca-reports/sca-results.sarif"
        
        # Generate SARIF from Dependabot alerts
        if [ -f "sca-reports/dependabot-alerts.json" ]; then
          jq '
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Dependabot SCA Scanner",
                    "version": "1.0.0",
                    "informationUri": "https://github.com/dependabot"
                  }
                },
                "results": [
                  .[] | {
                    "ruleId": .security_advisory.ghsa_id,
                    "ruleIndex": 0,
                    "message": {
                      "text": .security_advisory.summary
                    },
                    "locations": [
                      {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": .dependency.manifest_path
                          },
                          "region": {
                            "startLine": 1,
                            "startColumn": 1
                          }
                        }
                      }
                    ],
                    "level": (
                      if .security_vulnerability.severity == "critical" then "error"
                      elif .security_vulnerability.severity == "high" then "error"
                      elif .security_vulnerability.severity == "medium" then "warning"
                      else "note"
                      end
                    ),
                    "properties": {
                      "security-severity": (
                        if .security_vulnerability.severity == "critical" then "9.0"
                        elif .security_vulnerability.severity == "high" then "7.0"
                        elif .security_vulnerability.severity == "medium" then "5.0"
                        else "3.0"
                        end
                      ),
                      "precision": "very-high",
                      "problem.severity": .security_vulnerability.severity,
                      "tags": ["security", "external/cwe/cwe-" + (.security_advisory.cwe_ids[0] // "noinfo")]
                    }
                  }
                ]
              }
            ]
          }' sca-reports/dependabot-alerts.json > "$SARIF_FILE"
        else
          # Create empty SARIF if no alerts
          cat > "$SARIF_FILE" << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Dependabot SCA Scanner",
                    "version": "1.0.0",
                    "informationUri": "https://github.com/dependabot"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
        fi
        
        echo "sarif-file=$SARIF_FILE" >> $GITHUB_OUTPUT
        echo "✅ SARIF report generated from Dependabot alerts: $SARIF_FILE"

    - name: Upload SARIF to GitHub
      if: inputs.upload-sarif == 'true' && inputs.generate-sarif == 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ inputs.project-path }}/sca-reports/sca-results.sarif
        category: dependabot-sca-analysis
      continue-on-error: true

    - name: Check Build Failure Conditions
      shell: bash
      run: |
        echo "🔍 Checking build failure conditions..."
        
        CRITICAL_COUNT="${{ steps.scan.outputs.critical }}"
        HIGH_COUNT="${{ steps.scan.outputs.high }}"
        FAIL_ON_CRITICAL="${{ inputs.fail-on-critical }}"
        FAIL_ON_HIGH="${{ inputs.fail-on-high }}"
        
        echo "Current vulnerabilities from Dependabot:"
        echo "  - Critical: $CRITICAL_COUNT"
        echo "  - High: $HIGH_COUNT"
        echo ""
        echo "Failure conditions:"
        echo "  - Fail on critical: $FAIL_ON_CRITICAL" 
        echo "  - Fail on high: $FAIL_ON_HIGH"
        
        if [ "$FAIL_ON_CRITICAL" = "true" ] && [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "❌ Build failed: $CRITICAL_COUNT critical vulnerabilities found by Dependabot"
          echo "💡 Check the Security tab in your GitHub repository for details"
          exit 1
        fi
        
        if [ "$FAIL_ON_HIGH" = "true" ] && [ "$HIGH_COUNT" -gt 0 ]; then
          echo "❌ Build failed: $HIGH_COUNT high severity vulnerabilities found by Dependabot"
          echo "💡 Check the Security tab in your GitHub repository for details"
          exit 1
        fi
        
        echo "✅ Build passed Dependabot vulnerability checks"

    - name: Archive SCA Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependabot-sca-reports
        path: ${{ inputs.project-path }}/sca-reports/
        retention-days: 30
        
    - name: Display Dependabot Summary
      shell: bash
      run: |
        echo "📊 Dependabot SCA Analysis Complete"
        echo ""
        echo "🔍 Summary:"
        echo "  - Total Vulnerabilities: ${{ steps.scan.outputs.total }}"
        echo "  - Critical: ${{ steps.scan.outputs.critical }}"
        echo "  - High: ${{ steps.scan.outputs.high }}"
        echo "  - Medium: ${{ steps.scan.outputs.medium }}"
        echo "  - Low: ${{ steps.scan.outputs.low }}"
        echo ""
        echo "📋 Benefits of using Dependabot:"
        echo "  ✅ Native GitHub integration"
        echo "  ✅ Zero configuration required"
        echo "  ✅ Automatic security updates"
        echo "  ✅ Real-time vulnerability alerts"
        echo "  ✅ No external dependencies"
        echo "  ✅ Fast execution (seconds vs minutes)"
        echo ""
        echo "💡 View detailed vulnerability information at:"
        echo "   https://github.com/${{ github.repository }}/security/dependabot"
