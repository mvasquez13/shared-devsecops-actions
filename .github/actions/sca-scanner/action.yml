name: 'SCA Scanner'
description: 'Software Composition Analysis for dependency vulnerabilities'

inputs:
  project-path:
    description: 'Path to the project directory'
    required: false
    default: '.'
  
  package-manager:
    description: 'Package manager type (maven, npm, pip, gradle, composer)'
    required: false
    default: 'auto'
  
  fail-on-critical:
    description: 'Fail the build on critical vulnerabilities'
    required: false
    default: 'true'
  
  fail-on-high:
    description: 'Fail the build on high severity vulnerabilities'
    required: false
    default: 'true'
  
  generate-sarif:
    description: 'Generate SARIF report for GitHub Code Scanning'
    required: false
    default: 'true'
  
  upload-sarif:
    description: 'Upload SARIF report to GitHub Security tab'
    required: false
    default: 'true'
  
  exclude-paths:
    description: 'Comma-separated list of paths to exclude from scanning'
    required: false
    default: ''

outputs:
  total-vulnerabilities:
    description: 'Total number of vulnerabilities found'
    value: ${{ steps.scan.outputs.total }}
  
  critical-vulnerabilities:
    description: 'Number of critical vulnerabilities'
    value: ${{ steps.scan.outputs.critical }}
  
  high-vulnerabilities:
    description: 'Number of high vulnerabilities'
    value: ${{ steps.scan.outputs.high }}
  
  medium-vulnerabilities:
    description: 'Number of medium vulnerabilities'
    value: ${{ steps.scan.outputs.medium }}
  
  low-vulnerabilities:
    description: 'Number of low vulnerabilities'
    value: ${{ steps.scan.outputs.low }}
  
  sarif-file:
    description: 'Path to generated SARIF file'
    value: ${{ steps.scan.outputs.sarif-file }}

runs:
  using: 'composite'
  steps:
    - name: Setup SCA Analysis Environment
      shell: bash
      run: |
        echo "🔧 Setting up SCA analysis environment..."
        
        # Install required tools
        echo "📦 Installing analysis tools..."
        
        # Install npm audit-ci for Node.js projects
        if command -v npm &> /dev/null; then
          npm install -g audit-ci || echo "⚠️ Failed to install audit-ci"
        fi
        
        # Install safety for Python projects
        if command -v pip3 &> /dev/null; then
          pip3 install safety || echo "⚠️ Failed to install safety"
        elif command -v pip &> /dev/null; then
          pip install safety || echo "⚠️ Failed to install safety"
        fi
        
        # Install retire.js for JavaScript vulnerability scanning
        if command -v npm &> /dev/null; then
          npm install -g retire || echo "⚠️ Failed to install retire.js"
        fi
        
        echo "✅ SCA environment setup completed"

    - name: Detect Package Manager
      id: detect
      shell: bash
      working-directory: ${{ inputs.project-path }}
      run: |
        echo "🔍 Detecting package manager..."
        
        PACKAGE_MANAGER="${{ inputs.package-manager }}"
        
        if [ "$PACKAGE_MANAGER" = "auto" ]; then
          if [ -f "pom.xml" ]; then
            PACKAGE_MANAGER="maven"
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            PACKAGE_MANAGER="gradle"
          elif [ -f "package.json" ]; then
            PACKAGE_MANAGER="npm"
          elif [ -f "requirements.txt" ] || [ -f "Pipfile" ] || [ -f "pyproject.toml" ]; then
            PACKAGE_MANAGER="pip"
          elif [ -f "composer.json" ]; then
            PACKAGE_MANAGER="composer"
          elif [ -f "Gemfile" ]; then
            PACKAGE_MANAGER="bundler"
          elif [ -f "go.mod" ]; then
            PACKAGE_MANAGER="go"
          else
            echo "⚠️ Could not detect package manager, defaulting to maven"
            PACKAGE_MANAGER="maven"
          fi
        fi
        
        echo "package-manager=$PACKAGE_MANAGER" >> $GITHUB_OUTPUT
        echo "📦 Detected package manager: $PACKAGE_MANAGER"

    - name: Run SCA Analysis
      id: scan
      shell: bash
      working-directory: ${{ inputs.project-path }}
      run: |
        echo "🔍 Running SCA analysis..."
        
        PACKAGE_MANAGER="${{ steps.detect.outputs.package-manager }}"
        CRITICAL_COUNT=0
        HIGH_COUNT=0
        MEDIUM_COUNT=0
        LOW_COUNT=0
        TOTAL_COUNT=0
        SCAN_RESULTS=""
        
        # Create reports directory
        mkdir -p sca-reports
        
        echo "📊 Analyzing dependencies with $PACKAGE_MANAGER..."
        
        case $PACKAGE_MANAGER in
          "maven")
            echo "🔍 Maven dependency analysis..."
            
            # Run OWASP dependency check if available
            if command -v mvn &> /dev/null; then
              echo "Running Maven dependency check..."
              mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=0 -DsuppressComments=true -DdataDirectory=./sca-reports/dc-data || true
              
              if [ -f "target/dependency-check-report.json" ]; then
                cp target/dependency-check-report.json sca-reports/
                echo "✅ OWASP dependency check completed"
              fi
            fi
            
            # Use GitHub Advisory Database via npm audit for Maven projects with package.json
            if [ -f "package.json" ]; then
              echo "Found package.json, running npm audit..."
              npm audit --json > sca-reports/npm-audit.json 2>/dev/null || true
            fi
            ;;
            
          "npm")
            echo "🔍 NPM dependency analysis..."
            
            # Run npm audit
            if [ -f "package.json" ]; then
              echo "Running npm audit..."
              npm audit --json > sca-reports/npm-audit.json 2>/dev/null || true
              
              # Run audit-ci for better control
              if command -v audit-ci &> /dev/null; then
                audit-ci --report-type json --output-file sca-reports/audit-ci.json || true
              fi
              
              # Run retire.js
              if command -v retire &> /dev/null; then
                retire --outputformat json --outputpath sca-reports/retire.json || true
              fi
            fi
            ;;
            
          "pip")
            echo "🔍 Python dependency analysis..."
            
            # Run safety check
            if command -v safety &> /dev/null; then
              echo "Running safety check..."
              safety check --json --output sca-reports/safety.json || true
            fi
            
            # Check requirements.txt with pip-audit if available
            if [ -f "requirements.txt" ] && command -v pip-audit &> /dev/null; then
              pip-audit --format=json --output=sca-reports/pip-audit.json || true
            fi
            ;;
            
          "gradle")
            echo "🔍 Gradle dependency analysis..."
            
            if command -v gradle &> /dev/null; then
              # Run OWASP dependency check for Gradle
              gradle dependencyCheckAnalyze --info || true
              
              if [ -f "build/reports/dependency-check-report.json" ]; then
                cp build/reports/dependency-check-report.json sca-reports/
              fi
            fi
            ;;
            
          *)
            echo "⚠️ Unsupported package manager: $PACKAGE_MANAGER"
            ;;
        esac
        
        # Parse results and count vulnerabilities
        echo "📊 Parsing vulnerability results..."
        
        # Parse npm audit results
        if [ -f "sca-reports/npm-audit.json" ]; then
          echo "Parsing npm audit results..."
          
          CRITICAL_NPM=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "critical")) | length' sca-reports/npm-audit.json 2>/dev/null || echo "0")
          HIGH_NPM=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "high")) | length' sca-reports/npm-audit.json 2>/dev/null || echo "0")
          MEDIUM_NPM=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "moderate")) | length' sca-reports/npm-audit.json 2>/dev/null || echo "0")
          LOW_NPM=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "low")) | length' sca-reports/npm-audit.json 2>/dev/null || echo "0")
          
          CRITICAL_COUNT=$((CRITICAL_COUNT + CRITICAL_NPM))
          HIGH_COUNT=$((HIGH_COUNT + HIGH_NPM))
          MEDIUM_COUNT=$((MEDIUM_COUNT + MEDIUM_NPM))
          LOW_COUNT=$((LOW_COUNT + LOW_NPM))
          
          echo "NPM Audit: Critical=$CRITICAL_NPM, High=$HIGH_NPM, Medium=$MEDIUM_NPM, Low=$LOW_NPM"
        fi
        
        # Parse safety results
        if [ -f "sca-reports/safety.json" ]; then
          echo "Parsing safety results..."
          
          # Safety reports all as medium by default
          SAFETY_COUNT=$(jq '. | length' sca-reports/safety.json 2>/dev/null || echo "0")
          MEDIUM_COUNT=$((MEDIUM_COUNT + SAFETY_COUNT))
          
          echo "Safety: Medium=$SAFETY_COUNT"
        fi
        
        # Parse OWASP dependency check results
        if [ -f "sca-reports/dependency-check-report.json" ]; then
          echo "Parsing OWASP dependency check results..."
          
          CRITICAL_OWASP=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICAL")] | length' sca-reports/dependency-check-report.json 2>/dev/null || echo "0")
          HIGH_OWASP=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "HIGH")] | length' sca-reports/dependency-check-report.json 2>/dev/null || echo "0")
          MEDIUM_OWASP=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "MEDIUM")] | length' sca-reports/dependency-check-report.json 2>/dev/null || echo "0")
          LOW_OWASP=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "LOW")] | length' sca-reports/dependency-check-report.json 2>/dev/null || echo "0")
          
          CRITICAL_COUNT=$((CRITICAL_COUNT + CRITICAL_OWASP))
          HIGH_COUNT=$((HIGH_COUNT + HIGH_OWASP))
          MEDIUM_COUNT=$((MEDIUM_COUNT + MEDIUM_OWASP))
          LOW_COUNT=$((LOW_COUNT + LOW_OWASP))
          
          echo "OWASP: Critical=$CRITICAL_OWASP, High=$HIGH_OWASP, Medium=$MEDIUM_OWASP, Low=$LOW_OWASP"
        fi
        
        TOTAL_COUNT=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT))
        
        # Set outputs
        echo "total=$TOTAL_COUNT" >> $GITHUB_OUTPUT
        echo "critical=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        echo "high=$HIGH_COUNT" >> $GITHUB_OUTPUT
        echo "medium=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
        echo "low=$LOW_COUNT" >> $GITHUB_OUTPUT
        
        echo ""
        echo "🔍 SCA Analysis Summary:"
        echo "  - Total Vulnerabilities: $TOTAL_COUNT"
        echo "  - Critical: $CRITICAL_COUNT"
        echo "  - High: $HIGH_COUNT"
        echo "  - Medium: $MEDIUM_COUNT"
        echo "  - Low: $LOW_COUNT"
        
        # Generate detailed report
        echo "📝 Generating detailed vulnerability report..."
        cat > sca-reports/summary.json << EOF
        {
          "total": $TOTAL_COUNT,
          "critical": $CRITICAL_COUNT,
          "high": $HIGH_COUNT,
          "medium": $MEDIUM_COUNT,
          "low": $LOW_COUNT,
          "package_manager": "$PACKAGE_MANAGER",
          "scan_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF

    - name: Generate SARIF Report
      if: inputs.generate-sarif == 'true'
      shell: bash
      working-directory: ${{ inputs.project-path }}
      run: |
        echo "📄 Generating SARIF report..."
        
        SARIF_FILE="sca-reports/sca-results.sarif"
        
        # Create basic SARIF structure
        cat > "$SARIF_FILE" << 'EOF'
        {
          "version": "2.1.0",
          "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
          "runs": [
            {
              "tool": {
                "driver": {
                  "name": "SCA Scanner",
                  "version": "1.0.0",
                  "informationUri": "https://github.com/your-org/sca-scanner"
                }
              },
              "results": []
            }
          ]
        }
        EOF
        
        echo "sarif-file=$SARIF_FILE" >> $GITHUB_OUTPUT
        echo "✅ SARIF report generated: $SARIF_FILE"

    - name: Upload SARIF to GitHub
      if: inputs.upload-sarif == 'true' && inputs.generate-sarif == 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ inputs.project-path }}/sca-reports/sca-results.sarif
        category: sca-analysis
      continue-on-error: true

    - name: Check Build Failure Conditions
      shell: bash
      run: |
        echo "🔍 Checking build failure conditions..."
        
        CRITICAL_COUNT="${{ steps.scan.outputs.critical }}"
        HIGH_COUNT="${{ steps.scan.outputs.high }}"
        FAIL_ON_CRITICAL="${{ inputs.fail-on-critical }}"
        FAIL_ON_HIGH="${{ inputs.fail-on-high }}"
        
        echo "Current vulnerabilities:"
        echo "  - Critical: $CRITICAL_COUNT"
        echo "  - High: $HIGH_COUNT"
        echo ""
        echo "Failure conditions:"
        echo "  - Fail on critical: $FAIL_ON_CRITICAL" 
        echo "  - Fail on high: $FAIL_ON_HIGH"
        
        if [ "$FAIL_ON_CRITICAL" = "true" ] && [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "❌ Build failed: $CRITICAL_COUNT critical vulnerabilities found"
          exit 1
        fi
        
        if [ "$FAIL_ON_HIGH" = "true" ] && [ "$HIGH_COUNT" -gt 0 ]; then
          echo "❌ Build failed: $HIGH_COUNT high severity vulnerabilities found"
          exit 1
        fi
        
        echo "✅ Build passed vulnerability checks"

    - name: Archive SCA Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sca-reports
        path: ${{ inputs.project-path }}/sca-reports/
        retention-days: 30
