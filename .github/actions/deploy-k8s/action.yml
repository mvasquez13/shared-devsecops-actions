name: 'Deploy to Kubernetes using Template'
description: 'Deploy application to AKS using the generate-manifest.sh script'

inputs:
  registry:
    description: 'Container registry URL'
    required: true
    default: 'myregistry.azurecr.io'
  image-name:
    description: 'Docker image name'
    required: true
  image-tag:
    description: 'Docker image tag'
    required: true
  app-name:
    description: 'Application name'
    required: true
  namespace:
    description: 'Kubernetes namespace'
    required: true
  kubeconfig:
    description: 'Kubernetes configuration (base64 encoded)'
    required: false
  azure-credentials:
    description: 'Azure service principal credentials (JSON)'
    required: false
  cluster-name:
    description: 'AKS cluster name'
    required: false
  resource-group:
    description: 'Azure resource group'
    required: false
  manifests-path:
    description: 'Path to Kubernetes manifests directory'
    required: false
    default: './k8s-manifests'
  replicas:
    description: 'Number of replicas'
    required: false
    default: '2'
  environment:
    description: 'Environment (dev, staging, prod)'
    required: false
    default: 'dev'
  ingress-host:
    description: 'Ingress hostname'
    required: false
    default: 'app.local'
  registry-username:
    description: 'Container registry username'
    required: false
  registry-password:
    description: 'Container registry password'
    required: false

outputs:
  deployment-url:
    description: 'Deployment URL'
    value: ${{ steps.deploy.outputs.url }}
  manifest-file:
    description: 'Generated manifest file path'
    value: ${{ steps.generate.outputs.manifest-file }}

runs:
  using: 'composite'
  steps:
    # - name: Setup Prerequisites
    #   shell: bash
    #   run: |
    #     echo "🔧 Setting up prerequisites..."
    #     curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    #     chmod +x kubectl
    #     sudo mv kubectl /usr/local/bin/
    #     if [ -n "${{ inputs.azure-credentials }}" ]; then
    #       curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    #     fi

    # - name: Authenticate to Cluster
    #   shell: bash
    #   run: |
    #     echo "🔐 Authenticating to cluster..."
    #     mkdir -p ~/.kube
    #     if [ -n "${{ inputs.kubeconfig }}" ]; then
    #       echo '${{ inputs.kubeconfig }}' | base64 -d > ~/.kube/config
    #     elif [ -n "${{ inputs.azure-credentials }}" ]; then
    #       echo '${{ inputs.azure-credentials }}' > azure-creds.json
    #       az login --service-principal \
    #         --username $(jq -r .clientId azure-creds.json) \
    #         --password $(jq -r .clientSecret azure-creds.json) \
    #         --tenant $(jq -r .tenantId azure-creds.json)
    #       az aks get-credentials \
    #         --resource-group "${{ inputs.resource-group }}" \
    #         --name "${{ inputs.cluster-name }}" \
    #         --overwrite-existing
    #       rm azure-creds.json
    #     fi
    #     chmod 600 ~/.kube/config

    - name: Generate Manifests from Template
      id: generate
      shell: bash
      run: |
        echo "📝 Generating manifests from template..."
        ACTION_DIR="${{ github.action_path }}"
        cd "$ACTION_DIR"
        chmod +x generate-manifest.sh
        
        MANIFEST_DIR="${GITHUB_WORKSPACE}/${{ inputs.manifests-path }}"
        mkdir -p "$MANIFEST_DIR"
        
        ./generate-manifest.sh \
          --app-name "${{ inputs.app-name }}" \
          --namespace "${{ inputs.namespace }}" \
          --registry "${{ inputs.registry }}" \
          --tag "${{ inputs.image-tag }}" \
          --replicas "${{ inputs.replicas }}" \
          --environment "${{ inputs.environment }}" \
          --ingress-host "${{ inputs.ingress-host }}" \
          --template-file "maven-manifest.yml" \
          --output-file "$MANIFEST_DIR/deployment.yml"
        
        echo "manifest-file=$MANIFEST_DIR/deployment.yml" >> $GITHUB_OUTPUT
        echo "✅ Manifest generated successfully"

    # - name: Deploy to Kubernetes
    #   id: deploy
    #   shell: bash
    #   run: |
    #     echo "🚀 Deploying to Kubernetes..."
    #     MANIFEST_FILE="${{ steps.generate.outputs.manifest-file }}"
    #     kubectl apply -f "$MANIFEST_FILE"
        
    #     kubectl rollout status deployment/${{ inputs.app-name }} --namespace=${{ inputs.namespace }} --timeout=300s
        
    #     SERVICE_NAME="${{ inputs.app-name }}-service"
    #     SERVICE_IP=$(kubectl get service "$SERVICE_NAME" --namespace=${{ inputs.namespace }} -o jsonpath='{.spec.clusterIP}' 2>/dev/null || echo "")
    #     DEPLOYMENT_URL="http://$SERVICE_IP"
        
    #     echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
    #     echo "✅ Deployment completed: $DEPLOYMENT_URL"

    - name: Deployment Summary
      shell: bash
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **App**: ${{ inputs.app-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace**: ${{ inputs.namespace }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ inputs.registry }}/${{ inputs.image-name }}:${{ inputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY