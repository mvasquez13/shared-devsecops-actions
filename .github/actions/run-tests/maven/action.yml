name: 'Maven Tests'
description: 'Execute Maven tests and generate surefire reports'

inputs:
  maven-args:
    description: 'Additional Maven arguments'
    required: false
    default: '-B'
  coverage-threshold:
    description: 'Minimum code coverage percentage'
    required: false
    default: '80'
  fail-on-threshold:
    description: 'Fail the action if coverage is below threshold'
    required: false
    default: 'true'

outputs:
  coverage-percentage:
    description: 'JaCoCo code coverage percentage'
    value: ${{ steps.coverage.outputs.percentage }}
  threshold-met:
    description: 'Whether coverage threshold was met'
    value: ${{ steps.coverage.outputs.threshold-met }}
  tests-passed:
    description: 'Number of Maven tests passed'
    value: ${{ steps.test.outputs.passed }}
  tests-failed:
    description: 'Number of Maven tests failed'
    value: ${{ steps.test.outputs.failed }}
  tests-total:
    description: 'Total number of tests executed'
    value: ${{ steps.test.outputs.total }}

runs:
  using: 'composite'
  steps:
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Install Maven dependencies
      shell: bash
      run: |
        echo "☕ Installing Maven dependencies..."
        mvn dependency:resolve ${{ inputs.maven-args }} -q

    - name: Run Maven Tests with JaCoCo
      id: test
      shell: bash
      run: |
        echo "🧪 Running Maven tests with JaCoCo coverage..."
        # Run tests with JaCoCo agent active to capture coverage
        mvn clean jacoco:prepare-agent test jacoco:report ${{ inputs.maven-args }}
        
        # Extract test results from surefire reports
        if [ -d "target/surefire-reports" ]; then
          PASSED=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'tests=' {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
          FAILED=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'failures=' {} \; | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
          TOTAL=$((${PASSED:-0} + ${FAILED:-0}))
          
          echo "passed=${PASSED:-0}" >> $GITHUB_OUTPUT
          echo "failed=${FAILED:-0}" >> $GITHUB_OUTPUT
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          
          echo "✅ Tests passed: ${PASSED:-0}, failed: ${FAILED:-0}, total: $TOTAL"
        else
          echo "⚠️ No surefire reports found"
          echo "passed=0" >> $GITHUB_OUTPUT
          echo "failed=0" >> $GITHUB_OUTPUT
          echo "total=0" >> $GITHUB_OUTPUT
        fi

    - name: Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: maven-test-reports-${{ github.run_id }}
        path: |
          target/surefire-reports/
          target/test-classes/
        retention-days: 30

    - name: Process Test Results
      if: always()
      shell: bash
      run: |
        echo "📊 Processing Maven test results..."
        
        if [ -d "target/surefire-reports" ]; then
          # Count test results
          PASSED=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'tests=' {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum+0}')
          FAILED=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'failures=' {} \; | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum+0}')
          ERRORS=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'errors=' {} \; | sed 's/.*errors="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum+0}')
          SKIPPED=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'skipped=' {} \; | sed 's/.*skipped="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum+0}')
          
          TOTAL=$((PASSED + FAILED + ERRORS + SKIPPED))
          
          # Add to GitHub Step Summary
          echo "## 🧪 Maven Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Passed | $PASSED |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ Failed | $FAILED |" >> $GITHUB_STEP_SUMMARY
          echo "| ⚠️ Errors | $ERRORS |" >> $GITHUB_STEP_SUMMARY
          echo "| ⏭️ Skipped | $SKIPPED |" >> $GITHUB_STEP_SUMMARY
          echo "| **📊 Total** | **$TOTAL** |" >> $GITHUB_STEP_SUMMARY
          
          if [ $FAILED -gt 0 ] || [ $ERRORS -gt 0 ]; then
            echo "❌ Tests failed: $FAILED failures, $ERRORS errors"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ❌ Failed Tests Details:" >> $GITHUB_STEP_SUMMARY
            
            # Extract failed test details
            find target/surefire-reports -name "TEST-*.xml" -exec grep -l 'failures="[^0]"' {} \; | while read file; do
              class_name=$(basename "$file" .xml | sed 's/TEST-//')
              echo "- **$class_name**" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "✅ All tests passed!"
          fi
        else
          echo "⚠️ No test reports found"
          echo "## ⚠️ No Maven test reports found" >> $GITHUB_STEP_SUMMARY
          echo "Make sure Maven Surefire plugin is configured correctly." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Analyze JaCoCo Coverage Report
      id: coverage
      shell: bash
      run: |
        echo "📊 Analyzing JaCoCo coverage report..."
        
        if [ -f "target/site/jacoco/index.html" ]; then
          # Extract coverage percentage from HTML report
          COVERAGE=$(grep -o 'Total[^<]*[0-9]*%' target/site/jacoco/index.html | head -1 | grep -o '[0-9]*%' | tr -d '%' || echo "0")
          
          # Alternative method using jacoco.csv if available
          if [ "$COVERAGE" -eq "0" ] && [ -f "target/site/jacoco/jacoco.csv" ]; then
            # Calculate coverage from CSV (instruction coverage)
            COVERED=$(tail -n 1 target/site/jacoco/jacoco.csv | cut -d',' -f5)
            MISSED=$(tail -n 1 target/site/jacoco/jacoco.csv | cut -d',' -f4)
            if [ "$COVERED" != "" ] && [ "$MISSED" != "" ]; then
              TOTAL=$((COVERED + MISSED))
              if [ "$TOTAL" -gt 0 ]; then
                COVERAGE=$((COVERED * 100 / TOTAL))
              fi
            fi
          fi
          
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "📊 JaCoCo code coverage: $COVERAGE%"
          
          # Check coverage threshold
          if [ "$COVERAGE" -lt "${{ inputs.coverage-threshold }}" ]; then
            echo "threshold-met=false" >> $GITHUB_OUTPUT
            echo "❌ Coverage ($COVERAGE%) below threshold (${{ inputs.coverage-threshold }}%)"
            
            if [ "${{ inputs.fail-on-threshold }}" = "true" ]; then
              exit 1
            fi
          else
            echo "threshold-met=true" >> $GITHUB_OUTPUT
            echo "✅ Coverage ($COVERAGE%) meets threshold (${{ inputs.coverage-threshold }}%)"
          fi
        else
          echo "⚠️ JaCoCo report not found at target/site/jacoco/index.html"
          echo "percentage=0" >> $GITHUB_OUTPUT
          echo "threshold-met=false" >> $GITHUB_OUTPUT
          
          if [ "${{ inputs.fail-on-threshold }}" = "true" ]; then
            echo "❌ No coverage report found and fail-on-threshold is enabled"
            exit 1
          fi
        fi

    - name: Upload JaCoCo Coverage Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jacoco-coverage-reports-${{ github.run_id }}
        path: target/site/jacoco/
        retention-days: 30

    - name: Generate Summary
      shell: bash
      run: |
        echo "## 📊 JaCoCo Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage Percentage**: ${{ steps.coverage.outputs.percentage }}%" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage Threshold**: ${{ inputs.coverage-threshold }}%" >> $GITHUB_STEP_SUMMARY
        echo "- **Threshold Met**: ${{ steps.coverage.outputs.threshold-met == 'true' && '✅ Yes' || '❌ No' }}" >> $GITHUB_STEP_SUMMARY
        echo "## 🧪 Maven Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests Passed**: ${{ steps.test.outputs.passed }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests Failed**: ${{ steps.test.outputs.failed }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Tests**: ${{ steps.test.outputs.total }}" >> $GITHUB_STEP_SUMMARY
        
        # Add detailed test results if available
        if [ -d "target/surefire-reports" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Test Details" >> $GITHUB_STEP_SUMMARY
          
          # Show failed tests if any
          if [ "${{ steps.test.outputs.failed }}" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### ❌ Failed Tests" >> $GITHUB_STEP_SUMMARY
            find target/surefire-reports -name "TEST-*.xml" -exec grep -l 'failures="[^0]"' {} \; | while read file; do
              TEST_CLASS=$(basename "$file" .xml | sed 's/TEST-//')
              echo "- **$TEST_CLASS**" >> $GITHUB_STEP_SUMMARY
            done
          fi
          
          # Show test execution time
          TOTAL_TIME=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'time=' {} \; | sed 's/.*time="\([^"]*\)".*/\1/' | awk '{sum+=$1} END {printf "%.2f", sum}')
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⏱️ **Total Execution Time**: ${TOTAL_TIME}s" >> $GITHUB_STEP_SUMMARY
        fi
