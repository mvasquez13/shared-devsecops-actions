name: 'Maven Tests'
description: 'Execute Maven tests and generate surefire reports'

inputs:
  maven-args:
    description: 'Additional Maven arguments'
    required: false
    default: '-B'
  coverage-threshold:
    description: 'Minimum code coverage percentage'
    required: false
    default: '80'
  fail-on-threshold:
    description: 'Fail the action if coverage is below threshold'
    required: false
    default: 'true'

outputs:
  coverage-percentage:
    description: 'JaCoCo code coverage percentage'
    value: ${{ steps.coverage.outputs.percentage }}
  threshold-met:
    description: 'Whether coverage threshold was met'
    value: ${{ steps.coverage.outputs.threshold-met }}
  tests-passed:
    description: 'Number of Maven tests passed'
    value: ${{ steps.test.outputs.passed }}
  tests-failed:
    description: 'Number of Maven tests failed'
    value: ${{ steps.test.outputs.failed }}
  tests-total:
    description: 'Total number of tests executed'
    value: ${{ steps.test.outputs.total }}

runs:
  using: 'composite'
  steps:
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Install Maven dependencies
      shell: bash
      run: |
        echo "‚òï Installing Maven dependencies..."
        mvn dependency:resolve ${{ inputs.maven-args }} -q

    - name: Run Maven Tests with JaCoCo
      id: test
      shell: bash
      run: |
        echo "üß™ Running Maven tests (matching local script)..."
        
        # Step 1: Clean and run tests (JaCoCo agent is configured in pom.xml)
        echo "üß™ Running unit tests..."
        mvn clean test ${{ inputs.maven-args }} -B
        
        # Step 2: Generate coverage report explicitly
        echo "üìä Generating coverage report..."
        mvn jacoco:report ${{ inputs.maven-args }} -B
        
        # Extract test results from surefire reports
        if [ -d "target/surefire-reports" ]; then
          PASSED=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'tests=' {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
          FAILED=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'failures=' {} \; | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
          TOTAL=$((${PASSED:-0} + ${FAILED:-0}))
          
          echo "passed=${PASSED:-0}" >> $GITHUB_OUTPUT
          echo "failed=${FAILED:-0}" >> $GITHUB_OUTPUT
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Tests passed: ${PASSED:-0}, failed: ${FAILED:-0}, total: $TOTAL"
        else
          echo "‚ö†Ô∏è No surefire reports found"
          echo "passed=0" >> $GITHUB_OUTPUT
          echo "failed=0" >> $GITHUB_OUTPUT
          echo "total=0" >> $GITHUB_OUTPUT
        fi

    - name: Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: maven-test-reports-${{ github.run_id }}
        path: |
          target/surefire-reports/
          target/test-classes/
        retention-days: 30

    - name: Process Test Results
      if: always()
      shell: bash
      run: |
        echo "üìä Processing Maven test results..."
        
        if [ -d "target/surefire-reports" ]; then
          # Count test results
          PASSED=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'tests=' {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum+0}')
          FAILED=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'failures=' {} \; | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum+0}')
          ERRORS=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'errors=' {} \; | sed 's/.*errors="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum+0}')
          SKIPPED=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'skipped=' {} \; | sed 's/.*skipped="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum+0}')
          
          TOTAL=$((PASSED + FAILED + ERRORS + SKIPPED))
          
          # Add to GitHub Step Summary
          echo "## üß™ Maven Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| ‚úÖ Passed | $PASSED |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ùå Failed | $FAILED |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ö†Ô∏è Errors | $ERRORS |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚è≠Ô∏è Skipped | $SKIPPED |" >> $GITHUB_STEP_SUMMARY
          echo "| **üìä Total** | **$TOTAL** |" >> $GITHUB_STEP_SUMMARY
          
          if [ $FAILED -gt 0 ] || [ $ERRORS -gt 0 ]; then
            echo "‚ùå Tests failed: $FAILED failures, $ERRORS errors"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚ùå Failed Tests Details:" >> $GITHUB_STEP_SUMMARY
            
            # Extract failed test details
            find target/surefire-reports -name "TEST-*.xml" -exec grep -l 'failures="[^0]"' {} \; | while read file; do
              class_name=$(basename "$file" .xml | sed 's/TEST-//')
              echo "- **$class_name**" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "‚úÖ All tests passed!"
          fi
        else
          echo "‚ö†Ô∏è No test reports found"
          echo "## ‚ö†Ô∏è No Maven test reports found" >> $GITHUB_STEP_SUMMARY
          echo "Make sure Maven Surefire plugin is configured correctly." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Debug and Analyze JaCoCo Coverage Report
      id: coverage
      shell: bash
      run: |
        echo "üìä Analyzing JaCoCo coverage report..."
        
        # Debug: List all files in target directory
        echo "üîç Debug: Listing target directory structure..."
        if [ -d "target" ]; then
          find target -name "*.exec" -o -name "*.html" -o -name "*.csv" -o -name "*.xml" | grep -i jacoco || echo "No JaCoCo files found"
          
          echo "üìÅ Target directory structure:"
          ls -la target/ || echo "Target directory not found"
          
          if [ -d "target/site" ]; then
            echo "üìÅ Target/site directory:"
            ls -la target/site/ || echo "Site directory not found"
            
            if [ -d "target/site/jacoco" ]; then
              echo "üìÅ JaCoCo directory contents:"
              ls -la target/site/jacoco/
            fi
          fi
        fi
        
        # Debug: Check if jacoco.exec was generated during tests
        if [ -f "target/jacoco.exec" ]; then
          EXEC_SIZE=$(stat -f%z "target/jacoco.exec" 2>/dev/null || stat -c%s "target/jacoco.exec" 2>/dev/null || echo "unknown")
          echo "‚úÖ jacoco.exec found with size: $EXEC_SIZE bytes"
          
          if [ "$EXEC_SIZE" -gt 0 ]; then
            echo "‚úÖ JaCoCo execution data captured during tests"
          else
            echo "‚ö†Ô∏è jacoco.exec is empty - JaCoCo agent may not have been active"
          fi
        else
          echo "‚ùå jacoco.exec not found - JaCoCo agent was not active during test execution"
          echo "üí° This suggests the JaCoCo Maven plugin prepare-agent goal was not executed"
        fi
        
        if [ -f "target/site/jacoco/index.html" ]; then
          echo "‚úÖ JaCoCo HTML report found"
          
          # Debug: Show first few lines of HTML report
          echo "üîç First 10 lines of JaCoCo report:"
          head -10 target/site/jacoco/index.html
          
          # Extract coverage percentage from HTML report
          COVERAGE=$(grep -o 'Total[^<]*[0-9]*%' target/site/jacoco/index.html | head -1 | grep -o '[0-9]*%' | tr -d '%' || echo "0")
          
          # Alternative method using jacoco.csv if available
          if [ "$COVERAGE" -eq "0" ] && [ -f "target/site/jacoco/jacoco.csv" ]; then
            # Calculate coverage from CSV (instruction coverage)
            COVERED=$(tail -n 1 target/site/jacoco/jacoco.csv | cut -d',' -f5)
            MISSED=$(tail -n 1 target/site/jacoco/jacoco.csv | cut -d',' -f4)
            if [ "$COVERED" != "" ] && [ "$MISSED" != "" ]; then
              TOTAL=$((COVERED + MISSED))
              if [ "$TOTAL" -gt 0 ]; then
                COVERAGE=$((COVERED * 100 / TOTAL))
              fi
            fi
          fi
          
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "üìä JaCoCo code coverage: $COVERAGE%"
          
          # Check coverage threshold
          if [ "$COVERAGE" -lt "${{ inputs.coverage-threshold }}" ]; then
            echo "threshold-met=false" >> $GITHUB_OUTPUT
            
            # Calculate how much coverage is needed
            NEEDED=$((${{ inputs.coverage-threshold }} - COVERAGE))
            
            echo "‚ö†Ô∏è Coverage Warning: $COVERAGE% is below target of ${{ inputs.coverage-threshold }}%"
            echo "üìà Need $NEEDED% more coverage to meet the threshold"
            
            # Add detailed information to GitHub Step Summary
            echo "## ‚ö†Ô∏è Code Coverage Below Threshold" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| üìä Current Coverage | **$COVERAGE%** |" >> $GITHUB_STEP_SUMMARY
            echo "| üéØ Target Threshold | **${{ inputs.coverage-threshold }}%** |" >> $GITHUB_STEP_SUMMARY
            echo "| üìà Gap | **$NEEDED%** |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üí° Recommendations:" >> $GITHUB_STEP_SUMMARY
            echo "- Add more unit tests to increase coverage" >> $GITHUB_STEP_SUMMARY
            echo "- Focus on untested methods and branches" >> $GITHUB_STEP_SUMMARY
            echo "- Review JaCoCo report for specific areas needing tests" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ inputs.fail-on-threshold }}" = "true" ]; then
              echo "‚ùå Failing build due to coverage threshold not met"
              exit 1
            else
              echo "‚ö†Ô∏è Continuing build despite coverage threshold not met (fail-on-threshold=false)"
            fi
          else
            echo "threshold-met=true" >> $GITHUB_OUTPUT
            EXCESS=$((COVERAGE - ${{ inputs.coverage-threshold }}))
            echo "‚úÖ Coverage ($COVERAGE%) meets threshold (${{ inputs.coverage-threshold }}%)"
            
            # Add success information to GitHub Step Summary
            echo "## ‚úÖ Code Coverage Meets Threshold" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| üìä Current Coverage | **$COVERAGE%** |" >> $GITHUB_STEP_SUMMARY
            echo "| üéØ Target Threshold | **${{ inputs.coverage-threshold }}%** |" >> $GITHUB_STEP_SUMMARY
            echo "| üöÄ Surplus | **+$EXCESS%** |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéâ **Great job!** Your code coverage exceeds the required threshold." >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "‚ùå JaCoCo HTML report not found at target/site/jacoco/index.html"
          echo "percentage=0" >> $GITHUB_OUTPUT
          echo "threshold-met=false" >> $GITHUB_OUTPUT
          
          # Add debugging information to GitHub Step Summary
          echo "## ‚ùå JaCoCo Coverage Report Not Found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Debugging Information:" >> $GITHUB_STEP_SUMMARY
          echo "- Expected location: \`target/site/jacoco/index.html\`" >> $GITHUB_STEP_SUMMARY
          echo "- JaCoCo execution data: $([ -f 'target/jacoco.exec' ] && echo '‚úÖ Found' || echo '‚ùå Missing')" >> $GITHUB_STEP_SUMMARY
          echo "- Maven jacoco:report goal: Executed but may have failed silently" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üí° Possible Solutions:" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify JaCoCo plugin is properly configured in pom.xml" >> $GITHUB_STEP_SUMMARY
          echo "2. Ensure prepare-agent goal runs before tests" >> $GITHUB_STEP_SUMMARY
          echo "3. Check that tests actually execute code (not just empty tests)" >> $GITHUB_STEP_SUMMARY
          echo "4. Review Maven build logs for JaCoCo errors" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.fail-on-threshold }}" = "true" ]; then
            echo "‚ùå No coverage report found and fail-on-threshold is enabled"
            exit 1
          else
            echo "‚ö†Ô∏è Continuing without coverage report (fail-on-threshold=false)"
          fi
        fi

    - name: Upload JaCoCo Coverage Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jacoco-coverage-reports-${{ github.run_id }}
        path: target/site/jacoco/
        retention-days: 30

    - name: Generate Summary
      shell: bash
      run: |
        echo "## üìä JaCoCo Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage Percentage**: ${{ steps.coverage.outputs.percentage }}%" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage Threshold**: ${{ inputs.coverage-threshold }}%" >> $GITHUB_STEP_SUMMARY
        echo "- **Threshold Met**: ${{ steps.coverage.outputs.threshold-met == 'true' && '‚úÖ Yes' || '‚ùå No' }}" >> $GITHUB_STEP_SUMMARY
        echo "## üß™ Maven Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests Passed**: ${{ steps.test.outputs.passed }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests Failed**: ${{ steps.test.outputs.failed }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Tests**: ${{ steps.test.outputs.total }}" >> $GITHUB_STEP_SUMMARY
        
        # Add detailed test results if available
        if [ -d "target/surefire-reports" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Test Details" >> $GITHUB_STEP_SUMMARY
          
          # Show failed tests if any
          if [ "${{ steps.test.outputs.failed }}" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### ‚ùå Failed Tests" >> $GITHUB_STEP_SUMMARY
            find target/surefire-reports -name "TEST-*.xml" -exec grep -l 'failures="[^0]"' {} \; | while read file; do
              TEST_CLASS=$(basename "$file" .xml | sed 's/TEST-//')
              echo "- **$TEST_CLASS**" >> $GITHUB_STEP_SUMMARY
            done
          fi
          
          # Show test execution time
          TOTAL_TIME=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'time=' {} \; | sed 's/.*time="\([^"]*\)".*/\1/' | awk '{sum+=$1} END {printf "%.2f", sum}')
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚è±Ô∏è **Total Execution Time**: ${TOTAL_TIME}s" >> $GITHUB_STEP_SUMMARY
        fi
